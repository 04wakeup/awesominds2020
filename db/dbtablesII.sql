-- Generated by Oracle SQL Developer Data Modeler 19.4.0.350.1424
--   at:        2020-05-25 18:34:58 PDT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g

Set foreign_Key_checks = 0;
drop table if exists avatar cascade;
drop table if exists challenge cascade;
drop table if exists course cascade;
drop table if exists chapter cascade;
drop table if exists user cascade;
drop table if exists question cascade;
drop table if exists score cascade;
drop table if exists invite cascade;
drop table if exists chapter_task cascade;
drop table if exists round cascade;
drop table if exists task cascade;
drop table if exists answer cascade;
drop table if exists course_registration cascade;
Set foreign_Key_checks = 1;

CREATE TABLE challenge (
    challenge_pk   INTEGER NOT NULL auto_increment,
    challenge_name  VARCHAR(20) NOT NULL,
    challenge_description     VARCHAR(100) NOT NULL,
    primary key (challenge_pk)
);

-- alter table challenge ADD CONSTRAINT challenge_pk PRIMARY KEY ( challenge_pk );

CREATE TABLE chapter_task (
    course_id_fk   varchar(9) NOT NULL,
    chapter_id_fk  INTEGER NOT NULL,
    task_fk     INTEGER NOT NULL,
    enabled        CHAR(1) NOT NULL,
    point_value    INTEGER default 15
);

ALTER TABLE chapter_task
    ADD CONSTRAINT chapter_task_pk PRIMARY KEY ( task_fk,
                                                 chapter_id_fk,
                                                 course_id_fk );

CREATE TABLE chapter (
    course_id_fk     varchar(9) NOT NULL,
    chapter_id       INTEGER NOT NULL,
    chapter_name     varchar (40) NOT NULL,
    preamble         varchar (200) NOT NULL,
    start_date       DATE NOT NULL,
    due_date         DATE NOT NULL,
    end_date         DATE NOT NULL,
    hidden           char(1) not null default false,
    lives            INTEGER NOT NULL default 3,
    in_a_row_number  INTEGER NOT NULL default 3,
    in_a_row_point   INTEGER NOT NULL default 20,
    game_theme       varchar (200),
    num_of_rounds    INTEGER NOT NULL default 3,
    primary key ( chapter_id, course_id_fk)
);

CREATE TABLE course (
    course_id    varchar(9) NOT NULL,
    course_name  varchar(20) NOT NULL,
    hidden       char(1) not null default false,
    regcode      varchar(40) NOT NULL,
    inst_c_number_fk varchar(11) not null -- NOTE: this could be moved to course_registration
);

ALTER TABLE course ADD CONSTRAINT course_pk PRIMARY KEY ( course_id );

CREATE TABLE invite (
  invite_pk       INTEGER NOT NULL auto_increment,
  invite_code     varchar(40) NOT NULL,
  email           varchar(100) NOT NULL,
  c_number_fk     varchar(11) NOT NULL,
  PRIMARY KEY ( invite_pk )
);

CREATE TABLE question (
    course_id_fk   varchar(9) NOT NULL,
    chapter_id_fk  INTEGER NOT NULL,
    question_id    INTEGER NOT NULL,
    question       varchar (1000) NOT NULL,   -- James: make it longer
    comment        varchar(1000) DEFAULT '',    -- James: put '' to avoid null error at play.js  
);

ALTER TABLE question
    ADD CONSTRAINT question_pk PRIMARY KEY ( question_id,
                                              chapter_id_fk,
                                              course_id_fk );

CREATE TABLE round (
    course_id_fk   varchar(9) NOT NULL,
    chapter_id_fk  INTEGER NOT NULL,
    round_id       INTEGER NOT NULL,
    questions      INTEGER NOT NULL default 10,
    max_point      INTEGER NOT NULL default 15,
    goal           varchar (25) NOT NULL default "Points",
    point_goal     INTEGER default 100,
    challenge_fk   INTEGER NOT NULL default 1
);

ALTER TABLE round
    ADD CONSTRAINT round_pk PRIMARY KEY ( chapter_id_fk,
                                           round_id,
                                           course_id_fk );

CREATE TABLE score (
    c_number_fk    varchar(11) NOT NULL,
    course_id_fk   varchar(9) NOT NULL,
    chapter_id_fk  INTEGER NOT NULL,
    task_fk     INTEGER NOT NULL,
    total_score    INTEGER NOT NULL,
    high_score     INTEGER NOT NULL,
    attempts       INTEGER NOT NULL default 1
);

ALTER TABLE score
    ADD CONSTRAINT score_pk PRIMARY KEY ( c_number_fk,
                                           task_fk,
                                           chapter_id_fk,
                                           course_id_fk );

-- 1 is rate questions
-- 2 is slide cards
-- 3 is just drills
-- 4 is game show

CREATE TABLE task (
    task_pk     INTEGER NOT NULL auto_increment,
    task_name    varchar(20) NOT NULL,
    description  varchar(100) NOT NULL,
    primary key (task_pk)
);

CREATE TABLE user (
    c_number    varchar(11) NOT NULL,
    first_name  varchar(30),
    last_name   varchar(30),
    username    varchar(30) NOT NULL unique,
    email       varchar(100) unique,
    password    varchar(100) NOT NULL,
    hash        varchar(32),
    avatar_fk  INTEGER NOT NULL default 1, -- TODO: rename to avatar_id and change references in db.php files
    instructor  CHAR(1) NOT NULL default false,
    -- active      CHAR(1) NOT NULL default false,   // James: not used anymore, activation way was changed by previous team
    last_on     DATE default null,
    volume      numeric(2, 1) NOT NULL default 0.2
);

ALTER TABLE user ADD CONSTRAINT user_pk PRIMARY KEY ( c_number );

CREATE TABLE answer (
    course_id_fk      varchar(9) NOT NULL,
    chapter_id_fk     INTEGER NOT NULL,
    question_id_fk    INTEGER NOT NULL,
    answer_id         INTEGER NOT NULL,
    answer            varchar(100) NOT NULL,
    correct           char(1) NOT NULL
);

ALTER TABLE answer
    ADD CONSTRAINT answer_pk PRIMARY KEY ( answer_id,
                                                  question_id_fk,
                                                  chapter_id_fk,
                                                  course_id_fk );

CREATE TABLE course_registration (
    course_id_fk    varchar(9) not null,
    c_number_fk     varchar(11) not null -- NOTE: There could be a column added to say if they are the instructor
);

alter table course_registration
    add constraint course_registration_pk primary key (course_id_fk, c_number_fk);

-- foreign keys

ALTER TABLE course_registration
    ADD CONSTRAINT course_reg_course_fk FOREIGN KEY (course_id_fk)
        REFERENCES course (course_id)
    on delete cascade;

ALTER TABLE course_registration
    ADD CONSTRAINT course_reg_user_fk FOREIGN KEY (c_number_fk)
        REFERENCES user (c_number)
    on delete cascade;

ALTER TABLE chapter_task
    ADD CONSTRAINT chapter_task_chapter_fk FOREIGN KEY ( chapter_id_fk,
                                                          course_id_fk )
        REFERENCES chapter ( chapter_id,
                              course_id_fk )
    on delete cascade;

ALTER TABLE chapter_task
    ADD CONSTRAINT chapter_task_task_fk FOREIGN KEY ( task_fk )
        REFERENCES task ( task_pk );

ALTER TABLE chapter
    ADD CONSTRAINT chapter_course_fk FOREIGN KEY ( course_id_fk )
        REFERENCES course ( course_id )
    on delete cascade;

ALTER TABLE invite
    ADD CONSTRAINT invite_user_fk FOREIGN KEY ( c_number_fk )
        REFERENCES user ( c_number );

ALTER TABLE question
    ADD CONSTRAINT question_chapter_fk FOREIGN KEY ( chapter_id_fk,
                                                       course_id_fk )
        REFERENCES chapter ( chapter_id,
                              course_id_fk )
    on delete cascade;

ALTER TABLE round
    ADD CONSTRAINT round_challenge_fk FOREIGN KEY ( challenge_fk )
        REFERENCES challenge ( challenge_pk );

ALTER TABLE round
    ADD CONSTRAINT round_chapter_fk FOREIGN KEY ( chapter_id_fk,
                                                    course_id_fk )
        REFERENCES chapter ( chapter_id,
                              course_id_fk )
    on delete cascade;

ALTER TABLE score
    ADD CONSTRAINT score_chapter_task_fk FOREIGN KEY ( task_fk,
                                                        chapter_id_fk,
                                                        course_id_fk )
        REFERENCES chapter_task ( task_fk,
                                  chapter_id_fk,
                                  course_id_fk )
    on delete cascade;

ALTER TABLE score
    ADD CONSTRAINT score_user_fk FOREIGN KEY ( c_number_fk )
        REFERENCES user ( c_number )
    on delete cascade;

ALTER TABLE answer
    ADD CONSTRAINT answer_question_fk FOREIGN KEY ( question_id_fk,
                                                            chapter_id_fk,
                                                            course_id_fk )
        REFERENCES question ( question_id,
                               chapter_id_fk,
                               course_id_fk )
    on delete cascade
    on update cascade;

alter table course
    add constraint course_user_fk foreign key (inst_c_number_fk)
        references user (c_number)
    on delete cascade;


-- Triggers

-- 1 is rate questions
-- 2 is slide cards
-- 3 is just drills
-- 4 is game show

DELIMITER //

-- when an instructor makes a chapter, insert the default settings into chapter_task and insert 3 default
-- rounds for game show

CREATE TRIGGER after_chapter_insert
AFTER INSERT 
ON chapter FOR EACH ROW
BEGIN 
    insert into chapter_task (course_id_fk, chapter_id_fk, task_fk, enabled, point_value)
    values (NEW.course_id_fk, NEW.chapter_id, 1, true, 1); -- rate questions
    insert into chapter_task (course_id_fk, chapter_id_fk, task_fk, enabled, point_value)
    values (NEW.course_id_fk, NEW.chapter_id, 2, true, 2); -- slide cards
    insert into chapter_task (course_id_fk, chapter_id_fk, task_fk, enabled, point_value)
    values (NEW.course_id_fk, NEW.chapter_id, 3, true, 5); -- just drills
    insert into chapter_task (course_id_fk, chapter_id_fk, task_fk, enabled, point_value)
    values (NEW.course_id_fk, NEW.chapter_id, 4, true, null); -- game show

    insert into round (course_id_fk, chapter_id_fk, round_id, challenge_fk) 
    values (NEW.course_id_fk, NEW.chapter_id, 1, 1); -- Keep choosing
    insert into round (course_id_fk, chapter_id_fk, round_id, challenge_fk) 
    values (NEW.course_id_fk, NEW.chapter_id, 2, 4); -- Choose 123
    insert into round (course_id_fk, chapter_id_fk, round_id, challenge_fk) 
    values (NEW.course_id_fk, NEW.chapter_id, 3, 3); -- One Crack Timer

END; //

-- when an instructor makes a course, insert them into the registration table so they can play it

CREATE TRIGGER after_course_insert
AFTER INSERT 
ON course FOR EACH ROW
BEGIN
    insert into course_registration (course_id_fk, c_number_fk)
    values (NEW.course_id, NEW.inst_c_number_fk);
END; //


DELIMITER ;

insert into task (task_name, description) values ("Rate Questions", "Rate Questions based on difficulty");
insert into task (task_name, description) values ("Slide Cards", "Slide the question to reveal the answer");
insert into task (task_name, description) values ("Just Drills", "Study Mode!\nEarn points if you are correct");
insert into task (task_name, description) values ("Game Show", "Play through each round\nScore as many points as possible");
 
insert into challenge (challenge_name, challenge_description) values ("Keep Choosing", "Keep choosing until the right answer is selected");
insert into challenge (challenge_name, challenge_description) values ("One Crack", "You only get one choice");
insert into challenge (challenge_name, challenge_description) values ("One Crack Time Bonus", "The faster you respond, the more points you earn");
insert into challenge (challenge_name, challenge_description) values ("Choose 1, 2, or 3", "Choose up to 3 of the options displayed");
insert into challenge (challenge_name, challenge_description) values ("Big Money", "Keep choosing until the right answer is selected\nGame over on the 4th attempt");
insert into challenge (challenge_name, challenge_description) values ("Mystery Multiplier", "mm description template");

-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            12
-- CREATE INDEX                             0
-- ALTER TABLE                             23
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           1
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0